name: Run Robot Tests in Parallel

on:
  schedule:
    - cron: '0 7 * * *'    # Executa todos os dias às 07:00 UTC
  workflow_dispatch:
    inputs:
      module:
        description: 'Digite o nome da suíte/pasta a executar (ex: CN05-Estimativa) ou deixe vazio para rodar tudo'
        required: false
        default: ''

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3

      - name: Configurar PYTHONPATH
        run: echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget unzip xvfb libglib2.0-0 libnss3 \
            libfontconfig1 libxss1 libasound2t64

      - name: Instalar dependências Python
        run: pip install -r requirements.txt robotframework-pabot

      - name: Instalar Google Chrome
        run: sudo apt-get install -y google-chrome-stable

      - name: Rodar testes Robot em paralelo com Xvfb
        id: run_tests
        run: |
          set -o pipefail

          # Inicia o X virtual framebuffer
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          XVFB_PID=$!
          export DISPLAY=:99

          # Define qual suíte executar
          if [ -n "${{ github.event.inputs.module }}" ]; then
            echo "Executando somente a suíte: ${{ github.event.inputs.module }}"
            TARGET_SUITE="TestCases/${{ github.event.inputs.module }}"
          else
            echo "Executando todas as suítes"
            TARGET_SUITE="TestCases"
          fi

          echo "Arquivo alvo: $TARGET_SUITE"

          # Execuções com retry
          pabot --processes 4 --output output1.xml "$TARGET_SUITE" || true
          pabot --processes 2 --rerunfailed output1.xml --output output2.xml "$TARGET_SUITE" || true
          pabot --processes 1 --rerunfailed output2.xml --output output3.xml "$TARGET_SUITE" || true

          kill $XVFB_PID

      - name: Preparar merge e gerar relatórios
        run: |
          set -e

          # Lista todos os .xml para debug
          ls -la *.xml

          # Monta dinamicamente o array de arquivos a mesclar
          FILES=()
          for f in output1.xml output2.xml output3.xml; do
          if [[ -f "$f" ]]; then
            echo "Incluindo $f na mescla"
            FILES+=("$f")
          else
            echo "$f não encontrado, pulando"
          fi
          done

          # Agora faz o merge dos XMLs existentes
          rebot --merge --output merged_output.xml "${FILES[@]}"

          # Gera HTML de log e report a partir do merged_output
          rebot --log log.html --report report.html merged_output.xml


      - name: Verificar se ainda há falhas
        run: |
          FAIL_COUNT=$(grep -oP 'status="FAIL"' merged_output.xml | wc -l)
          echo "Total de falhas = $FAIL_COUNT"
          TOLERANCIA=3
          if [ "$FAIL_COUNT" -gt "$TOLERANCIA" ]; then
            echo "::error ::Mais de $TOLERANCIA casos falharam após retry!"
            exit 1
          else
            echo "::warning ::$FAIL_COUNT falhas (dentro da tolerância de $TOLERANCIA)."
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: Robot Framework Reports
          path: |
            output1.xml
            output2.xml
            output3.xml
            merged_output.xml
            log.html
            report.html
